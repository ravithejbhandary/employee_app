# Stage 1: Build the Go application
FROM golang:1.24.4-alpine AS builder

# Set the working directory inside the container to the module root
WORKDIR /app

# Copy go.mod and go.sum from the main directory
COPY go.mod go.sum ./

# Copy the backend source code into the container
COPY ./backend ./backend

# Download and cache the dependencies
RUN go mod download

# Install protoc and Go plugins for code generation
RUN apk add --no-cache git protobuf protobuf-dev build-base \
    && go install google.golang.org/protobuf/cmd/protoc-gen-go@latest \
    && go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest \
    && go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest \
    && go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest

# Add Go bin to PATH
ENV PATH="$PATH:$(go env GOPATH)/bin"

# Clone the googleapis repository (for grpc-gateway imports)
RUN git clone https://github.com/googleapis/googleapis.git /app/googleapis

# Generate pb files (into correct package path)
WORKDIR /app/backend
RUN protoc -I. -I/app/googleapis \
    --go_out=. --go_opt=paths=source_relative \
    --go-grpc_out=. --go-grpc_opt=paths=source_relative \
    --grpc-gateway_out=. --grpc-gateway_opt=logtostderr=true,paths=source_relative \
    --openapiv2_out=. --openapiv2_opt=logtostderr=true \
    employee.proto

# Clean up
RUN rm -rf /app/googleapis

# Build the server binary
RUN go build -o /app/server .

# Stage 2: Create a minimal image for the final application
FROM alpine:3.18
RUN apk --no-cache add ca-certificates

WORKDIR /app
COPY --from=builder /app/server .

EXPOSE 50051
EXPOSE 8080

CMD ["./server"]
