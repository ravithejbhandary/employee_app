# Stage 1: The Builder
# Use the official Go image as the base for building the application.
FROM golang:1.22-alpine AS builder

# Set the working directory inside the container.
WORKDIR /app

# Copy the Go module files to leverage Docker's caching.
COPY go.mod go.sum ./

# Download all Go module dependencies.
RUN go mod download

# Copy the rest of the application source code.
COPY . .

# Build the Go application, creating a standalone binary named 'server'.
RUN go build -o server ./server.go

# Stage 2: The Final Image
# Use a minimal Alpine image to reduce the final container size.
FROM alpine:latest

# Set the working directory for the final container.
WORKDIR /app

# Copy the compiled binary from the builder stage into the final image.
COPY --from=builder /app/server .

# Expose the gRPC port so it can be accessed.
EXPOSE 50051

# The command to run the server binary when the container starts.
CMD ["./server"]
